#include <stdio.h>

#include <stdlib.h>





typedef struct Node {

    int data;

    struct Node* prev;

    struct Node* next;

} Node;





Node* createNode(int data) {

    Node* newNode = (Node*)malloc(sizeof(Node));

    newNode->data = data;

    newNode->prev = NULL;

    newNode->next = NULL;

    return newNode;

}

void insertAtFront(Node** head, int data) {

    Node* newNode = createNode(data);

    if (*head == NULL) {

        *head = newNode;

    } else {

        newNode->next = *head;

        (*head)->prev = newNode;

        *head = newNode;

    }

}

void insertAtEnd(Node** head, int data) {

    Node* newNode = createNode(data);

    if (*head == NULL) {

        *head = newNode;

    } else {

        Node* temp = *head;

        while (temp->next != NULL) {

            temp = temp->next;

        }

        temp->next = newNode;

        newNode->prev = temp;

    }

}

void insertAtMiddle(Node** head, int data, int position) {

    if (position <= 0) {

        printf("Invalid position!\n");

        return;

    }

    

    Node* newNode = createNode(data);

    Node* temp = *head;



    

    for (int i = 1; i < position && temp != NULL; i++) {

        temp = temp->next;

    }

    

    if (temp == NULL) {

        printf("Position out of bounds!\n");

        free(newNode);

        return;

    }



    newNode->next = temp->next;

    newNode->prev = temp;

    if (temp->next != NULL) {

        temp->next->prev = newNode;

    }

    temp->next = newNode;

}

void deleteAtFront(Node** head) {

    if (*head == NULL) {

        printf("List is empty!\n");

        return;

    }

    

    Node* temp = *head;

    *head = (*head)->next;

    

    if (*head != NULL) {

        (*head)->prev = NULL;

    }

    

    free(temp);

}

void deleteAtEnd(Node** head) {

    if (*head == NULL) {

        printf("List is empty!\n");

        return;

    }

    

    Node* temp = *head;

    

    if (temp->next == NULL) {

        *head = NULL;

    } else {

        while (temp->next != NULL) {

            temp = temp->next;

        }

        temp->prev->next = NULL;

    }

    

    free(temp);

}

void deleteAtMiddle(Node** head, int position) {

    if (*head == NULL || position <= 0) {

        printf("Invalid position or List is empty!\n");

        return;

    }

    

    Node* temp = *head;

    

    

    for (int i = 1; i < position && temp != NULL; i++) {

        temp = temp->next;

    }

    

    if (temp == NULL) {

        printf("Position out of bounds!\n");

        return;

    }

    

    if (temp->prev != NULL) {

        temp->prev->next = temp->next;

    } else {

        *head = temp->next;

    }

    

    if (temp->next != NULL) {

        temp->next->prev = temp->prev;

    }

    

    free(temp);

}

void printList(Node* head) {

    Node* temp = head;

    while (temp != NULL) {

        printf("%d ", temp->data);

        temp = temp->next;

    }

    printf("\n");

}

int main() {

    Node* head = NULL;

    

    insertAtFront(&head, 10);

    insertAtEnd(&head, 20);

    insertAtFront(&head, 5);

    insertAtMiddle(&head, 15, 2);

    

    printf("List after insertions: ");

    printList(head);

    

    deleteAtFront(&head);

    deleteAtEnd(&head);

    deleteAtMiddle(&head, 2);

    

    printf("List after deletions: ");

    printList(head);

    

    return 0;

}

